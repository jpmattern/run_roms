################################################################################
#                                                                              #
#   Configuration file to be used with run_roms_da.                            #
#   Should contain various variables and may contain commands to copy or move  #
#   files etc.                                                                 #
#                                                                              #
#   This file is run by run_roms_da using the source command and must          #
#   therefore be a valid bash script and adhere to bash syntax.                #
#                                                                              #
#   Two variables are supplied by the calling script:                          #
#   script_dir: The directory that contains the calling script                 #
#   config_dir: The directory that contains the configuration file             #
#               (this file).                                                   #
#                                                                              #
################################################################################


#-------------------------------------------------------------------------------
#  Application title and IO file prefix.
#-------------------------------------------------------------------------------

title="Data Assimilation"

file_prefix="ocean"

da_name="4DVAR"

echo "│
│  $title
│
├ script_dir: $script_dir
└ config_dir: $config_dir
"

#-------------------------------------------------------------------------------
#  directories and log-file
#-------------------------------------------------------------------------------

# The directory to run 4DVar in. This should be an absolute path
# ($config_dir provides an absolute path).

main_dir="${config_dir}/run"

# The storage directory for some of the relevant ROMS output
# (ROMS log-, mod- and the fwd file ).

storage_dir="${config_dir}/output"

# The name of the run_roms_da log-file.

run_roms_logfile="${config_dir}/run_roms_da.log"

# The following custom directories are not used in the main script 
# run_roms_da and are only used in the configuration file (this 
# file).

# Data directory (not used in main script).

data_dir="${HOME}/roms/data"

#-------------------------------------------------------------------------------
#  input files
#-------------------------------------------------------------------------------

# Initial file for first data assimilation cycle.

ini_file=${data_dir}/ini/wc12_nemuro_roms_689_20000101.nc

# Set what parts of the model are adjusted by the assimilation.
# If da_adjust contains the letter I, initial conditions are adjusted.
# If da_adjust contains the letter F, forcings are adjusted.
# If da_adjust contains the letter B, boundary conditions are adjusted.
# If da_adjust contains the letter M, model error are adjusted.
# example: use da_adjust=IB to adjust boundary and initial conditions.
#
# Set da_adjust=free to perform a free model simulation without data
# assimilation (no normalization or standard deviation files need to
# be specified).
# In free simulations, if "da_in" is specified, then an 
# observation file is required as well (for simulations with the 
# VERIFICATION option). If da_in is not specified or set empty,
# no observation file is required.

da_adjust=I

# The standard deviation (background-error covariance) files

if [[ $da_adjust == *I* ]]; then
    # Use stdi_file to specify a standard deviation file with monthly entries 
    # or a standard deviation file with a single time entry. 
    # If 12 entries are present, the standard deviation is sliced based on
    # the date of the beginning of each data assimilation cycle.
    stdi_file=${data_dir}/std/CCSRA31_wc12_stdI_nemuro_log_sp.nc
    
    # stdi_file_local specifies the name of the local copy (or slice) of the standard 
    # deviation file. If stdi_file_local contains "%s", it will be replaced by the 
    # current month; if it contains "%d", that will be replaced by the cycle day. 
    # If left empty, the standard name will be used.
    stdi_file_local=
fi
if [[ $da_adjust == *F* ]]; then
    # Use stdf_file to specify a standard deviation file with monthly entries 
    # or a standard deviation file with a single time entry. 
    # If 12 entries are present, the standard deviation is sliced based on
    # the date of the beginning of each data assimilation cycle.
    stdf_file=${data_dir}/std/CCSRA31_wc12_stdI_nemuro_log_sp.nc
    
    # stdf_file_local specifies the name of the local copy (or slice) of the standard 
    # deviation file. If stdf_file_local contains "%s", it will be replaced by the 
    # current month; if it contains "%d", that will be replaced by the cycle day. 
    # If left empty, the standard name will be used.
    stdf_file_local=
fi
if [[ $da_adjust == *B* ]]; then
    # Use stdb_file to specify a standard deviation file with monthly entries 
    # or a standard deviation file with a single time entry. 
    # If 12 entries are present, the standard deviation is sliced based on
    # the date of the beginning of each data assimilation cycle.
    stdb_file=${data_dir}/std/CCSRA31_wc12_stdI_nemuro_log_sp.nc
    
    # stdb_file_local specifies the name of the local copy (or slice) of the standard 
    # deviation file. If stdb_file_local contains "%s", it will be replaced by the 
    # current month; if it contains "%d", that will be replaced by the cycle day. 
    # If left empty, the standard name will be used.
    stdb_file_local=
fi
if [[ $da_adjust == *M* ]]; then
    # Use stdm_file to specify a standard deviation file with monthly entries 
    # or a standard deviation file with a single time entry. 
    # If 12 entries are present, the standard deviation is sliced based on
    # the date of the beginning of each data assimilation cycle.
    stdm_file=${data_dir}/std/CCSRA31_wc12_stdI_nemuro_log_sp.nc
    
    # stdm_file_local specifies the name of the local copy (or slice) of the standard 
    # deviation file. If stdm_file_local contains "%s", it will be replaced by the 
    # current month; if it contains "%d", that will be replaced by the cycle day. 
    # If left empty, the standard name will be used.
    stdm_file_local=
fi

# The ROMS observation file. If obs_multifile is set to true the value of obs_file 
# is ignored, instead the files in the obs_files array will be used.

obs_file=${data_dir}/obs/obs_file_2019.nc

obs_multifile=false

if $obs_multifile; then
    # The dates in obs_filedates determine which file to use. For example, the file 
    # obs_multifile[i] will be used if the current assimilation cycle date d is 
    #   d >= obs_filedates[i] and d < obs_filedates[i+1]
    # Units of d are days since reference date (see roms_time_ref below).

    obs_files=(
        ${data_dir}/obs/obs_file_2013.nc
        ${data_dir}/obs/obs_file_2014.nc
        ${data_dir}/obs/obs_file_2015.nc
    )
    #              2013  2014  2015  
    obs_filedates=(41273 41638 42003)
fi

# Activate slicing of large observation files. If set to true, a smaller 
# observation file is sliced from the original file, based on the current 
# assimilation cycle start and end. Activating this option may significantly 
# reduce mod file sizes.

slice_obsfile=true

if $obs_slice ; then
    # Option to move the slices to $storage_dir after end of cycle.
    slice_save=true

    # Include observations associated with the final time step of the 
    # cycle in sliced observation file.
    slice_includelasttimestep=false

    # Apply weighting to the obs_error values in the sliced obsfile.
    # Integer value determines weighting type, set to 0 for no weighting.
    slice_weighting=0
fi

#-------------------------------------------------------------------------------
#  ROMS executables and standard input files
#-------------------------------------------------------------------------------

# The ROMS data assimilation executable.

executable=${data_dir}/executables/romsM

# Set the ROMS main input file (ocean.in file). ocean_in_local is the name of
# the local copy that will be placed in main_dir. If ocean_in_local contains 
# "%d", "%d" will be replaced with the day of the current assimilation cycle, 
# allowing the creation of unique filenames and permitting storage via the 
# storefiles_mask option (below).

ocean_in=${data_dir}/infiles/ocean.in
ocean_in_local=ocean_%d.in

# Set the biological input file. Leave empty or undefined for a physics-only 
# simulation. bio_in_local is the name of the local copy that will be placed
# in main_dir. If bio_in_local contains "%d", "%d" will be replaced with the 
# day of the current assimilation cycle.

bio_in=${data_dir}/infiles/nemuro.in
bio_in_local=bio_%d.in

# Set the 4DVar input file (4dvar.in file). da_in_local is the name of the 
# local copy that will be placed in main_dir. If da_in_local contains "%d",
# "%d" will be replaced with the day of the current assimilation cycle.

da_in=${data_dir}/infiles/s4dvar.in
da_in_local=s4dvar_%d.in

#-------------------------------------------------------------------------------
#  ROMS 4DVar setup
#-------------------------------------------------------------------------------

# The ROMS reference time (TIME_REF in ocean.in file) in a format that the UNIX 
# date command can understand ("19000101.0d0" is NOT.) If roms_time_ref is left
# unset, run_roms_da will attempt to read TIME_REF in the ocean.in file.

roms_time_ref=

# The starting and ending day of the sequential data assimilation, can be 
# specified as integers (in units of "days since roms_time_ref") or as date 
# strings (for example "2019-05-20").

start_day="2019-05-01"
stop_day="2019-06-01"

# The data assimilation cycle length in days.

cycle_length=4

# The model time step (in seconds).

dt=900

# Allow the model time stepping to be adapted dynamically.
# If set to true, dt is used as the first time stepping value. Upon a ROMS 
# blowup, run_roms_da will sequentially try the dt values specified in 
# adaptive_dt_options below.

adaptive_dt=false

if $adaptive_dt; then
    # The values in adaptive_dt_options options will be tried 
    # sequentially if ROMS fails with a blowup.
    adaptive_dt_options=(600 300)

    # Adjust the output frequency of history and average files
    # based on updated values of dt.
    # If set to true, the variables in adaptive_dt_adjustoutput_var 
    # (below) will be adjusted based on the updated value of dt. 
    # Note, that the adjustments will also affect the variables that 
    # have been set using paramchanges_ocean (see below).
    adaptive_dt_adjustoutput=true

    adaptive_dt_adjustoutput_var=( NSTA NFLT NHIS NDEFHIS NAVG NDEFAVG NDIA NDEFDIA NTLM NDEFTLM NADJ NDEFADJ NSFF NOBC )
fi

#-------------------------------------------------------------------------------
#  further ROMS parameters
#-------------------------------------------------------------------------------

# The model tiling.

NtileI=8
NtileJ=8

# The number of outer and inner loops.

Nouter=2
Ninner=10

# Other custom parameter changes to the ROMS ocean.in (file is copied, original 
# file is left unchanged; changes are applied in every cycle)
# paramchanges_ocean is an array containing parameter name and value pairs, 
# separated by "=".
# example:
#
# paramchanges_ocean=( NAVG=24 USER="12 34" )

paramchanges_ocean=(
)

# Custom parameter changes to the ROMS bio.in "bio_in" (file is copied, 
# original file is left unchanged; changes are applied in every cycle)
# paramchanges_bio is an array containing parameter name and value pairs, 
# separated by "=" (for example, see paramchanges_ocean above).

paramchanges_bio=(
)

# Custom parameter changes to the ROMS 4dvar.in "da_in" (file is copied, 
# original file is left unchanged; changes are applied in every cycle)
# paramchanges_da is an array containing parameter name and value pairs, 
# separated by "=" (for example, see paramchanges_ocean above).

paramchanges_da=(
)

# Allow adaptive ROMS parameter changes in response to ROMS blowups or
# fatal algorithm results. The parameter changes are specified using the
# paramchanges_adaptive option.
# The adaptive_paramchanges option cannot be combined with either the
# adaptive_step or adaptive_dt options.

adaptive_paramchanges=false

# Custom parameter changes to ROMS parameters in response to ROMS blowups or
# fatal algorithm results. Requires adaptive_paramchanges=true.
#
# paramchanges_adaptive is an array containing triples: file identifier, 
# parameter name, and parameter value. The file identifier must be one of 
#   "ocean" (specifying the ocean.in file)
#   "bio"   (specifying the bio.in file)
#   "da"    (specifying the 4dvar.in file)
# followed by a colon ":" and a parameter name and value pair. Parameter name and 
# value pairs are separated by "=".
# example:
#
# paramchanges_adaptive=( ocean:BPARNAM=altbio.in )

paramchanges_adaptive=(
)

# Names of ROMS bio.in "bio_in" parameters that will be copied from the 
# initial file to the to the bio.in files after the initial cycle. This option 
# allows for parameter estimation using the last estimated parameter values in 
# the next cycle. Note that this may overwrite values set in 
# paramchanges_bio_values above after the initial cycle. 

adjust_params_names=(
)

# For parameter estimation: adjust_params_correction specifies a script that
# corrects (adjusts) initial values of estimated parameters before they enter
# the assimilation (this allows for example parameter bounds).
# Input to the script is a string containing a parameter name, followed by a 
# string containing one or more parameter values, followed by extra arguments 
# specified by adjust_params_correction_args (below).
# The script must print one line containing the corrected parameter values.
#
# Leave empty or undefined if not used.

adjust_params_correction=

# Extra arguments for the script specified by adjust_params_correction
# (above). Leave empty or undefined if not used.

adjust_params_correction_args=

# Continue with assimilation cycles if a "fatal algorithm result" error is 
# encountered. If proceed_on_fatal_algorithm_result is set to true and a "fatal 
# algorithm result" error occurs, the current cycle is stopped, and a new 
# initial file is created based the best solution so far (this may lead to the 
# initial file being based on the prior nonlinear model solution). 

proceed_on_fatal_algorithm_result=false

#-------------------------------------------------------------------------------
#  Cycle transition options
#-------------------------------------------------------------------------------

# 0: Start new cycle at the end of the old one.
# 1: Start new cycle at cycle_transition_offset_sec seconds after the start of 
#    the previous cycle (ROMS must be configured to produce fwd file output for 
#    the corresponding timestep or an error is raised). 

cycle_transition_mode=0

if [[ $cycle_transition_mode == 1 ]]; then
    cycle_transition_offset_sec=86400
fi

# Existance of breakfile in $main_dir will terminate script after next completed 
# cycle.

breakfilename=".stop_run_roms_da"

# Remove breakfile before script is terminated, so that a restart will not end 
# in a repeat termination.

breakfile_remove=true

#-------------------------------------------------------------------------------
#  ROMS starting options
#-------------------------------------------------------------------------------

# roms_startmode determined the way ROMS is started
# The following values are supported:
# "auto":   Determine automtically based on configuration and the presence 
#           of "sbatch" command. 
# "sbatch": Use Slurm's sbatch command to submit job. 
# "srun":   Use Slurm's srun command to submit job (can be used to start run
#           nodes that are allocated via salloc if SLURM_JOB_ID is set 
#           correctly).
# "mpirun-machines": Use mpirun to start ROMS and specify machines via
#           machines variable below or the run_roms_da -m option.
# "mpirun": Use mpirun to start ROMS and specify machines via machinefile.
# "mpirun-plain": Just start ROMS using mpirun, no machine file is used.
roms_startmode=auto

# A file containing the host machines (used for mpirun-machines and mpirun)
machinefile="${HOME}/machines"

# The machine(s) to run executable on (optional, depending on roms_startmode)
machines=

# The number of idle nodes required for cycle to start (is checked before
# the start of each cycle), otherwise hibernate until the required number 
# of idle nodes is reached. Only supported for roms_startmode=sbatch.
# (Optional, the default is machines_numidle=0, i.e. start cycle without 
# checking for idle nodes)
machines_numidle=

# The following sbatch_* options are only needed for roms_startmode=sbatch.
#
# The sbatch script file with special variables that are set by 
# run_roms_da using sbatch's --export option. These special variables 
# are:
# ${ROMS_EXECUTABLE} will be replaced by the ROMS executable
# ${ROMS_INFILE} will be replaced by the ROMS ocean.in filename.

sbatch_templatefile=$script_dir/templates/sbatch_job.template

# Further arguments to be passed to sbatch. 
# Example: To redirect the batch script's standard error to the file 
# "sbatch_error.txt" use:
#    sbatch_args="--error=sbatch_error.txt"
# To set the number of tasks to be run on each node (overriding
# setting in sbatch_templatefile) use:
#    sbatch_args="--ntasks-per-node=20"
# Multiple arguments can be combined:
#    sbatch_args="--error=sbatch_error.txt --ntasks-per-node=10" 
# Leave empty to specify no additional arguments to sbatch. Do not use the
# arguments --job-name, --export, --ntasks or --output, as these will be 
# supplied by run_roms_da.

sbatch_args=

# The jobname assigned to the sbatch job using sbatch's -N option.
# If ROMS_sbatch_jobname contains "%d", "%d" will be replaced with the day of the 
# current assimilation cycle, "%c" will be replaced by the current cycle number. 

sbatch_jobname="${da_name}_cycle%c"

# A name of an executable that is source'd prior to starting Slurm jobs using
# either sbatch or srun. This script can be used to set environmental variables 
# such as SLURM_JOB_ID. Only active for roms_startmode=sbatch or srun, leave 
# empty for no effect.

slurm_prolog_source=

#-------------------------------------------------------------------------------
#  Output file-related
#-------------------------------------------------------------------------------

# A mask specifying extra files to be moved to $storage_dir before potentially being
# cleaned up. E.g. to save tangent linear model files use
#    storefilemask="*_tlm_*.nc"
# NOTE: in the example above the parentheses (") are important!
# Leave empty to not save any extra files.

storefiles_mask="*_fwd_*.nc"

# Activate post-simulation netCDF4 compression to stored files (this includes
# automatically stored files). Note that this option does not need to be 
# activated when ROMS performs netCDF4 compression already.

storefiles_compress=true

# The deflate level for netCDF4 compression (only active if storefiles_compress
# is activated).

storefiles_compress_deflatelevel=1

# Turn on shuffling for netCDF4 compression (only active if storefiles_compress
# is activated).

storefiles_compress_shuffle=true

# The UNIX nice level of the compression [0-19] which will be executed on 
# the same machine as this script (only active if storefiles_compress is
# activated).

storefiles_compress_nicelevel=10

